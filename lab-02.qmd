---
title: "lab-02"
subtitle: 'Border Summaries'
author:
  - name: Matthew Woodworth
    email: mattwood@colostate.edu
format:
  html:
    code-fold: true
    toc: true
    include-before-body: ../slides/header.html
    include-after-body:  ../slides/footer-annotations.html
---
```{r}
remotes::install_github("ropensci/USAboundaries")
remotes::install_github("ropensci/USAboundariesData")
```

```{r}
remotes::install_github("ropenscilabs/rnaturalearthdata")
```

```{r}
#install.packages("gghighlight")
#install.packages("ggrepel")
```

```{r}
# spatial data science
library(tidyverse)
library(sf)
library(units)

# Data
library(USAboundaries)
library(rnaturalearth)

# Visualization
library(gghighlight)
library(ggrepel)
library(knitr)
```

******

# Question 1: 

For this lab we need three (3) datasets. 

  1. Spatial boundaries of continental USA states (1.1) 
  2. Boundaries of Canada, Mexico and the United States (1.2)
  3. All USA cites (1.3)
  
  
### _1.1_ Define a Projection

For this lab we want to calculate distances between features, therefore we need a projection that preserves distance at the scale of CONUS. For this, we will use the North America Equidistant Conic:

```{r}
eqdc <- '+proj=eqdc +lat_0=40 +lon_0=-96 +lat_1=20 +lat_2=60 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs'
```

This PROJ.4 string defines an Equidistant Conic projection with the following parameters:\

  +proj=eqdc → Equidistant Conic projection\
  +lat_0=40 → Latitude of the projection's center (40°N)\
  +lon_0=-96 → Central meridian (96°W)\
  +lat_1=20 → First standard parallel (20°N)\
  +lat_2=60 → Second standard parallel (60°N)\
  +x_0=0 → False easting (0 meters)\
  +y_0=0 → False northing (0 meters)\
  +datum=NAD83 → Uses the North American Datum 1983 (NAD83)\
  +units=m → Units are in meters\
  +no_defs → No additional default parameters from PROJ’s database\

This projection is commonly used for mapping large areas with an east-west extent, especially in North America, as it balances distortion well between the two standard parallels.

### _1.2_ - Get USA state boundaries 

- USA state boundaries can be accessed with `USAboundaries::us_states(resolution = "low")`. Given the precision needed for this analysis we are ok with the low resolution. 
- Make sure you only have the states in the continental United States (CONUS) (**Hint** use `filter`)
- Make sure the data is in a projected coordinate system suitable for distance measurements at the national scale (`eqdc`). 

*****

### _1.3_ - Get country boundaries for Mexico, the United States of America, and Canada

In R, country boundaries are stored in the `rnaturalearth` package.

Once installed: 

- World boundaries can be accessed with `rnaturalearth::countries110`. 
- Make sure the data is in simple features (`sf`) format (**Hint** use the `st_as_sf` variable).
- Make sure you only have the countries you want (**Hint** `filter` on the `admin` variable)
- Make sure the data is in a projected coordinate system suitable for distance measurements at the national scale (`eqdc`). 

```{r}
states <- USAboundaries::us_states(resolution = "low") %>% 
  st_as_sf() %>% 
  filter(!state_abbr %in% c("HI", "AK", "PR")) %>% 
  st_transform(eqdc)

# USA State Boundaries
countries <- rnaturalearth::countries110 %>% 
  st_as_sf() %>% 
  filter(ABBREV %in% c("U.S.A.", "Mex.", "Can.")) %>% 
  st_transform(eqdc) 
```

*****

### _1.4_ - Get city locations from the CSV file 

The process of finding, downloading and accessing data is the first step of every analysis. Here we will go through these steps (minus finding the data).

First go to this [site](https://simplemaps.com/data/us-cities) and download the appropriate (free) dataset into the data directory of this project.

Once downloaded, read it into your working session using `readr::read_csv()` and explore the dataset until you are comfortable with the information it contains.

While this data has everything we want, it is not yet spatial. Convert the `data.frame` to a spatial object using `st_as_sf` and prescribing the coordinate variables and CRS (**Hint** what projection are the raw coordinates in?)

Finally, remove cities in states not wanted and make sure the data is in a projected coordinate system suitable for distance measurements at the national scale:

Congratulations! You now have three real-world, large datasets ready for analysis.

```{r}
cities <-  read_csv("~/Desktop/CSU Spring 2025/ESS523c/ESS_523c/lab-02/simplemaps_uscities_basicv1/uscities.csv", show_col_types = FALSE) %>%  
  st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%  
  st_transform(eqdc) 
```

# Question 2: 

Here we will focus on calculating the distance of each USA city to (1) the national border (2) the nearest state border (3) the Mexican border and (4) the Canadian border. You will need to manipulate you existing spatial geometries to do this using either `st_union` or `st_combine` depending on the situation. In all cases, since we are after distances to borders, we will need to cast (`st_cast`) our `MULTIPPOLYGON` geometries to `MULTILINESTRING` geometries. To perform these distance calculations we will use `st_distance`(). 

### _2.1_ -  Distance to USA Border (coastline or national) (km)

For **2.2** we are interested in calculating the distance of each USA city to the USA border (coastline or national border). To do this we need all states to act as single unit. Convert the USA state boundaries to a `MULTILINESTRING` geometry in which the state boundaries are **resolved**. Please do this starting with the states object and _NOT_ with a filtered country object.  In addition to storing this distance data as part of the cities `data.frame`, produce a table (`flextable`) documenting the five cities farthest from a state border. Include only the city name, state, and distance. 
```{r}
us <- st_union(states) %>%  
  st_cast("MULTILINESTRING") %>%  
  st_as_sf()

cities <- cities %>% 
  st_filter(st_union(states)) %>%
  mutate(distance_to_us_border = set_units(st_distance(., us), "km"))

select(cities, city, state_name, distance_to_us_border) %>% 
  st_drop_geometry() %>%  
  slice_max(distance_to_us_border, n = 5) %>% 
  flextable::flextable()
```

### _2.2_ -  Distance to States (km)

For **2.1** we are interested in calculating the distance of each city to the nearest state boundary. To do this we need all states to act as single unit. Convert the USA state boundaries to a `MULTILINESTRING` geometry in which the state boundaries are **preserved** (not resolved). In addition to storing this distance data as part of the cities `data.frame`, produce a table (`flextable`) documenting the five cities farthest from a state border. Include only the city name, state, and distance.

```{r}
us <- st_combine(states) |> 
  st_cast("MULTILINESTRING") |> 
  st_as_sf()

cities <- cities %>% 
  st_filter(st_union(states)) %>%
  mutate(distance_to_state_border = set_units(st_distance(., us), "km"))

select(cities, city, state_name, distance_to_state_border) |>
  st_drop_geometry() |> 
  slice_max(distance_to_state_border, n = 5) |> 
  flextable::flextable()
```

### _2.3_ -  Distance to Mexico (km)

For **2.3** we are interested in calculating the distance of each city to the Mexican border. To do this we need to isolate Mexico from the country objects. In addition to storing this data as part of the cities data.frame, produce a table (`flextable`) documenting the five cities farthest from a state border. Include only the city name, state, and distance.

```{r}
mx <- filter(countries, ADMIN == "Mexico") %>% 
  st_cast("MULTILINESTRING") %>% 
  st_as_sf()

cities <- cities %>% 
  st_filter(st_union(states)) %>%
  mutate(distance_to_mx_border = set_units(st_distance(., mx), "km"))

select(cities, city, state_name, distance_to_mx_border) %>% 
  st_drop_geometry() %>% 
  slice_max(distance_to_mx_border, n = 5) %>% 
  flextable::flextable()
```

### _2.4_ -  Distance to Canada (km)

For **2.4** we are interested in calculating the distance of each city to the Canadian border. To do this we need to isolate Canada from the country objects. In addition to storing this data as part of the cities data.frame, produce a table (`flextable`) documenting the five cities farthest from a state border. Include only the city name, state, and distance.

```{r}
ca <- filter(countries, ADMIN == "Canada") %>% 
  st_cast("MULTILINESTRING") %>% 
  st_as_sf()

cities <- cities %>% 
  st_filter(st_union(states)) %>%
  mutate(distance_to_ca_border = set_units(st_distance(., ca), "km"))

select(cities, city, state_name, distance_to_ca_border) %>% 
  st_drop_geometry() %>% 
  slice_max(distance_to_ca_border, n = 5) %>% 
  flextable::flextable()
```

# Question 3:

In this section we will focus on visualizing the distance data you calculated above. You will be using `ggplot` to make your maps, `ggrepl` to label significant features, and `gghighlight` to emphasize important criteria.

### _3.1_ Data

Show the 3 continents, CONUS outline, state boundaries, and 10 largest USA cities (by population) on a single map

 - Use `geom_sf` to plot your layers
 - Use `lty` to change the line type and size to change line width
 - Use `ggrepel::geom_label_repel` to label your cities
 
```{r}
na <- filter(countries, ADMIN %in% c("Mexico", "Canada", "United States of America")) %>% 
  st_as_sf()

big_cities <- cities %>% 
  slice_max(population, n = 10)

ggplot() + 
  geom_sf(data = na, fill = "grey") + 
  geom_sf(data = states, fill = "white", lty = 2, size = 0.5) + 
  geom_sf(data = big_cities, color = 'blue', size = .5) + 
  ggrepel::geom_label_repel(data = big_cities, 
                               aes(geometry = geometry, label = city, label.size = .1),
                               stat = "sf_coordinates") + 
  theme_void()
```

### _3.2_  City Distance from the Border

Create a map that colors USA cities by their distance from the national border. In addition, re-draw and label the 5 cities that are farthest from the border.

```{r}
five_farthest <- cities %>%  
  slice_max(distance_to_us_border, n = 5)

ggplot() + 
  geom_sf(data = st_union(states), fill = "grey", lty = 2, size = 0.5) + 
  geom_sf(data = cities, aes(color = as.numeric(distance_to_us_border)), size = .5) + 
  geom_sf(data = five_farthest, color = 'red', size = .7) + 
  ggrepel::geom_label_repel(data = five_farthest, 
                               aes(geometry = geometry, label = city, label.size = .1),
                               stat = "sf_coordinates") + 
  scale_color_viridis_c() +
  theme_void() + 
  theme(legend.position = "bottom") + 
  labs(color = "Distance to Border (km)")
```

### _3.3_  City Distance from Nearest State

Create a map that colors USA cities by their distance from the nearest state border. In addition, re-draw and label the 5 cities that are farthest from any border.

```{r}
five_farthest <- cities |> 
  slice_max(distance_to_state_border, n = 5)

ggplot() + 
  geom_sf(data = st_union(states), fill = "grey", lty = 2, size = 0.5) + 
  geom_sf(data = cities, aes(color = as.numeric(distance_to_state_border)), size = .5) + 
  geom_sf(data = five_farthest, color = 'red', size = .7) + 
  ggrepel::geom_label_repel(data = five_farthest, 
                               aes(geometry = geometry, label = city, label.size = .1),
                               stat = "sf_coordinates") + 
  scale_color_viridis_c() +
  theme_void() + 
  theme(legend.position = "bottom") + 
  labs(color = "Distance to Border (km)")
```

### _3.4_  Equidistance boundary from Mexico and Canada

Here we provide a little more challenge. Use `gghighlight` to identify the cities that are equal distance from the Canadian **AND** Mexican border $\pm$ 100 km.

In addition, label the five (5) most populous cites in this zone.

```{r}
cities <- cities %>%  
  mutate(can_mx_dist = as.numeric(abs(distance_to_ca_border - distance_to_mx_border)))

five_farthest = filter(cities, can_mx_dist < 100) %>% 
  slice_max(population, n = 5)

ggplot() + 
  geom_sf(data = st_union(states), fill = "grey", lty = 2, size = 0.5) + 
  geom_sf(data = cities, aes(color = as.numeric(distance_to_us_border)), size = .5) + 
  geom_sf(data = five_farthest, color = 'red', size = .7) + 
  ggrepel::geom_label_repel(data = five_farthest, 
                               aes(geometry = geometry, label = city),
size = 2,
                               stat = "sf_coordinates") + 
  scale_color_viridis_c() +
  gghighlight(can_mx_dist < 100) +
  theme_void() + 
  theme(legend.position = "bottom") + 
  labs(color = "Distance to Border (km)")
```

# Question 4: 

### Real World Application

Recently, Federal Agencies have claimed basic constitutional rights protected by the Fourth Amendment (protecting Americans from random and arbitrary stops and searches) do not apply fully at our borders (see Portland). For example, federal authorities do not need a warrant or suspicion of wrongdoing to justify conducting what courts have called a "routine search," such as searching luggage or a vehicle. Specifically, federal regulations give U.S. Customs and Border Protection (CBP) authority to operate within _100 miles of any U.S. "external boundary"_.  Further information can be found at this [ACLU article](https://www.aclu.org/other/constitution-100-mile-border-zone).

### _4.1_ Quantifing Border Zone

- How many cities are in this 100 mile zone? (100 miles ~ 160 kilometers)
- How many people live in a city within 100 miles of the border?
- What percentage of the total population is in this zone?
- Does it match the ACLU estimate in the link above?

```{r}
cities %>% 
  st_drop_geometry() %>% 
  filter(as.numeric(distance_to_us_border) < 160) %>%  
  summarise(`Impacted Cities` = n(), 
            `Impacted Population` = sum(population), 
            `Impacted Percentage` = round(sum(population) / sum(cities$population) * 100, 2)) %>% 
  flextable::flextable()
```

Report this information as a table.

### _4.2_  Mapping Border Zone

- Make a map highlighting the cites within the 100 mile zone using `gghighlight.` 
- Use a color gradient from 'orange' to 'darkred'. 
- Label the 10 most populous cities in the Danger Zone

```{r}
largest_10 = filter(cities, as.numeric(distance_to_us_border) < 160) %>% 
  slice_max(population, n = 10)

ggplot() + 
  geom_sf(data = st_union(states), fill = "grey", lty = 2, size = 0.5) + 
  geom_sf(data = cities, aes(color = as.numeric(distance_to_us_border)), size = .5) + 
  geom_sf(data = largest_10, color = 'black', size = .8, shape = 4) + 
  ggrepel::geom_label_repel(data = largest_10, 
                               aes(geometry = geometry, label = city),
                               stat = "sf_coordinates") + 
  scale_color_gradient(low = "yellow", high = "maroon") +
  gghighlight(as.numeric(distance_to_us_border) < 160) +
  theme_void() + 
  theme(legend.position = "bottom") + 
  labs(color = "Distance to Border (km)")
```

### _4.3_ : Instead of labeling the 10 most populous cites, label the most populous city in each state within the Danger Zone.

```{r}
largest_state = filter(cities, as.numeric(distance_to_us_border) < 160) %>%  
  group_by(state_name) %>% 
  slice_max(population, n = 1)

ggplot() + 
  geom_sf(data = st_union(states), fill = "grey", lty = 2, size = 0.5) + 
  geom_sf(data = cities, aes(color = as.numeric(distance_to_us_border)), size = .5) + 
  geom_sf(data = largest_state, color = 'black', size = .8) + 
  ggrepel::geom_label_repel(data = largest_state, 
                               aes(geometry = geometry, label = city),
                               stat = "sf_coordinates") + 
  scale_color_gradient(low = "yellow", high = "maroon") +
  gghighlight(as.numeric(distance_to_us_border) < 160) +
  theme_void() + 
  theme(legend.position = "bottom") + 
  labs(color = "Distance to Border (km)")
```

****

# Rubric

- [ ] **Question 1** (35)
- [ ] **Question 2** (35)
- [ ] **Question 3** (35)
- [ ] **Question 4** (35)
- [ ] **Well Structured and appealing Qmd deployed as web page** (10)

**Total:** 150 points

# Submission

For this lab you will submit a URL to a webpage deployed with GitHub pages.

To do this:

 - Render your lab document
 - Stage/commit/push your files
 - If you followed the naming conventions in the "Set Up", your lab 2 link will be available at: 
 
`https://USERNAME.github.io/csu-523c/lab-02.html``

Submit this URL in the appropriate Canvas dropbox. Also take a moment to update your personal webpage with this link and some bullet points of what you learned. While not graded as part of this lab, it will be your final!

